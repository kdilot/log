import { gql, useMutation, useQuery } from "@apollo/client";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";

const TODO_GQL = gql`
  query {
    todos: getTodos {
      id
      title
      level
      isClosed
    }
    levels: getLevels {
      id
      name
    }
  }
`;
const CREATE_GQL = gql`
  mutation ($title: String!, $level: Int!, $isClosed: Boolean!) {
    createTodo(title: $title, level: $level, isClosed: $isClosed) {
      id
      level
      title
      isClosed
    }
  }
`;
const UPDATE_GQL = gql`
  mutation ($id: Int!, $title: String!, $level: Int!, $isClosed: Boolean!) {
    updateTodo(id: $id, title: $title, level: $level, isClosed: $isClosed) {
      id
      level
      title
      isClosed
    }
  }
`;
const DELETE_GQL = gql`
  mutation ($id: Int!) {
    deleteTodo(id: $id) {
      id
    }
  }
`;
const Home: NextPage = () => {
  const [title, setTitle] = useState("");
  const [level, setLevel] = useState(2);
  const [isClosed, setIsClosed] = useState(false);
  const [updateId, setUpdateId] = useState(0);
  const [levelGroup, setLevelGroup] = useState<any>({});
  const { data, loading } = useQuery(TODO_GQL);
  const resetInputForm = () => {
    setTitle("");
    setLevel(2);
    setIsClosed(false);
    setUpdateId(0);
  };
  const [createTodo, { loading: todoLoading, error }] = useMutation(
    CREATE_GQL,
    {
      refetchQueries: [{ query: TODO_GQL }],
      onCompleted() {
        resetInputForm();
      },
    }
  );
  const [updateTodo, { loading: updateLoading, error: updateError }] =
    useMutation(UPDATE_GQL, {
      refetchQueries: [{ query: TODO_GQL }],
      onCompleted() {
        resetInputForm();
      },
    });
  const [deleteTodo, { loading: deleteLoading }] = useMutation(DELETE_GQL, {
    refetchQueries: [{ query: TODO_GQL }],
    onCompleted() {
      resetInputForm();
    },
  });
  const { todos = [], levels = null } = data || [];

  useEffect(() => {
    if (levels) {
      const group: any = {};
      levels.map((level: any) => (group[level.id] = level.name));
      setLevelGroup(group);
    }
  }, [levels]);

  const handleClickButton = () => {
    if (!title) {
      alert("Empty title is not allowed.");
      return;
    }
    if (updateId) {
      updateTodo({
        variables: {
          id: updateId,
          title,
          level,
          isClosed,
        },
      });
      return;
    }
    createTodo({
      variables: {
        title,
        level,
        isClosed,
      },
    });
  };

  const handleClickTodo = (id: number) => {
    if (updateId === id) {
      resetInputForm();
      return;
    }
    const selectedTodo = todos.filter((todo: any) => todo.id === id)[0];
    const { title = "", level = 0, isClosed = false } = selectedTodo;
    if (title) {
      setTitle(title);
      setLevel(level);
      setIsClosed(isClosed);
      setUpdateId(Number(id));
      return;
    }
    alert("Error, Undefined ID");
  };

  const handleClickDelete = () => {
    deleteTodo({
      variables: {
        id: updateId,
      },
    });
  };

  if (error || updateError) {
    if (error) console.error(error);
    if (updateError) console.error(updateError);
    return <div>ERROR</div>;
  }

  if (loading || todoLoading || updateLoading || deleteLoading) {
    return <div>LOADING</div>;
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.tsx</code>
        </p>
        <p>
          <input
            placeholder="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
        </p>
        <p>
          <select
            value={level}
            onChange={(e) => setLevel(Number(e.target.value))}
          >
            <option value={1}>low</option>
            <option value={2}>normal</option>
            <option value={3}>high</option>
          </select>
        </p>
        <p>
          <input
            type="checkbox"
            id="check"
            checked={isClosed}
            onChange={() => setIsClosed((isClosed) => !isClosed)}
          />
          <label htmlFor="check">Done</label>
        </p>
        <p>
          <button onClick={handleClickButton}>
            {updateId ? `UPDATE ID: ${updateId}` : "ADD TODO"}
          </button>
        </p>
        {updateId > 0 && (
          <p>
            <button onClick={handleClickDelete}>DELETE TODO</button>
          </p>
        )}
        <div className={styles.grid}>
          {todos.map((todo: any) => (
            <a
              key={todo.id}
              href="#"
              className={styles.card}
              onClick={() => handleClickTodo(todo.id)}
              style={todo.id === updateId ? { borderColor: "red" } : {}}
            >
              <h3>ID : {todo.id}</h3>
              <h4>
                Level : {levelGroup ? levelGroup[todo.level] : todo.level}
              </h4>
              <p
                style={{
                  textDecoration: todo.isClosed ? "line-through" : "auto",
                }}
              >
                {todo.title}
              </p>
            </a>
          ))}
        </div>
      </main>
    </div>
  );
};

export default Home;
